<?php

/**
 * Implements hook_element_info_alter().
 *
 * This attaches the toolbar component to the toolbar element if the admin theme
 * is not set to the Gin theme, which provides its own toolbar styling and
 * JavaScript that can conflict with ours.
 */
function ambientimpact_ux_element_info_alter(array &$info) {
  /** @var \Drupal\Core\Config\ConfigFactoryInterface */
  $configFactory = \Drupal::service('config.factory');

  if (
    isset($info['toolbar']) &&
    $configFactory->get('system.theme')->get('admin') !== 'gin'
  ) {
    $info['toolbar']['#attached']['library'][] =
      'ambientimpact_ux/component.toolbar';
  }
}

/**
 * Implements hook_contextual_links_alter().
 *
 * This alters entity contextual link labels to include their entity bundles so
 * that the user has better context of what's being acted upon. The following
 * entities are currently supported:
 * - media
 * - nodes
 */
function ambientimpact_ux_contextual_links_alter(
  array &$links, $group, array $routeParameters
) {
  switch ($group) {
    case 'media':
    case 'node':
      break;
    default:
      return;
  }

  // These are the routes we alter. We don't want to alter all route labels
  // without knowing what we're going to alter, so this ensures we don't break
  // other contextual links that may be added in a different label format.
  $alterRoutes = [
    'entity.media.edit_form',
    'entity.media.delete_form',
    'entity.node.edit_form',
    'entity.node.delete_form',
  ];

  // Don't do any work if none of the routes are found in $links.
  if (count(array_intersect($alterRoutes, array_keys($links))) === 0) {
    return;
  }

  $connection = \Drupal::database();

  // Find the entity's type using a static database query. This should be far
  // more performant than loading the whole entity.
  switch ($group) {
    case 'media':
      $query = $connection->query(
        'SELECT bundle FROM {media} WHERE mid = :mid',
        [
          ':mid' => $routeParameters['media'],
        ]
      );

      break;

    case 'node':
      $query = $connection->query(
        'SELECT type FROM {node} WHERE nid = :nid',
        [
          ':nid' => $routeParameters['node'],
        ]
      );

      break;
  }

  $result = $query->fetchAll();

  // Most entities use a 'bundle' field to store the bundle machine name.
  if (!empty($result[0]->bundle)) {
    $machineName = $result[0]->bundle;

  // Nodes use 'type' rather than 'bundle', probably for legacy reasons.
  } else if (!empty($result[0]->type)) {
    $machineName = $result[0]->type;
  }

  // Don't do anything if we don't have a machine name to work with for whatever
  // reason.
  if (empty($machineName)) {
    return;
  }

  // Load all available entity bundles, which includes their labels.
  $bundles = \Drupal::service('entity_type.bundle.info')->getBundleInfo($group);

  // Don't proceed if the machine name doesn't exist in the bundles for whatever
  // unexpected reason.
  if (empty($bundles[$machineName]['label'])) {
    return;
  }

  $bundleLabel = $bundles[$machineName]['label'];

  // If the only the first character is upper case, lower it. This regular
  // expression tries to match the first two characters as uppercase letters to
  // infer if this is a normal word so that we don't mess up an abbreviation or
  // other acronym.
  if (preg_match('%^[A-Z]{2}%', $bundleLabel) !== 1) {
    $bundleLabel = lcfirst($bundleLabel);
  }

  foreach ($links as $routeName => $link) {
    if (!in_array($routeName, $alterRoutes)) {
      continue;
    }

    $links[$routeName]['title'] = t(
      '@contextualAction @bundleLabel',
      [
        '@contextualAction' => $links[$routeName]['title'],
        '@bundleLabel'      => $bundleLabel,
      ]
    );
  }
}

/**
 * Implements hook_node_links_alter().
 *
 * This removes the 'Read more' link if a node is displayed in a view mode
 * that's not enabled, i.e. doesn't have custom display settings, and so is
 * falling back to 'default'.
 *
 * @todo Should this be exposed as a setting per node type?
 *
 * @see https://api.drupal.org/api/drupal/core%21modules%21node%21node.api.php/function/hook_node_links_alter
 */
function ambientimpact_ux_node_links_alter(
  array &$links,
  \Drupal\node\NodeInterface $node,
  array &$context
) {
  // Bail early if the view mode is 'default' or the 'Read more' link is not
  // present in the array.
  if (
    $context['view_mode'] === 'default' ||
    !isset($links['node']['#links']['node-readmore'])
  ) {
    return;
  }

  $viewModeConfig = \Drupal::config(
    'core.entity_view_display.node.' .
    $node->getType() . '.' .
    $context['view_mode']
  );

  // If the status is explicitly false, remove the link. Note that we must use a
  // strict (===) operator here, because the config could also return null
  // which would equate to false if the truthy (==) operator was used.
  if ($viewModeConfig->get('status') === false) {
    unset($links['node']['#links']['node-readmore']);
  }
}

/**
 * Implements hook_link_alter().
 *
 * @param array &$variables
 *   An associative array of variables defining a link.
 *
 * @see \hook_link_alter()
 *   Documents this hook.
 *
 * @see \Drupal\ambientimpact_ux\Plugin\AmbientImpact\Component\LinkExternal::processExternalLink()
 *   The $variables array is passed to this method to mark links as external.
 *
 * @see \Drupal\ambientimpact_ux\Plugin\AmbientImpact\Component\LinkImage::processLink()
 *   The $variables array is passed to this method to detect if the link points
 *   to an image file, contains an image, and to alter it based on those.
 */
function ambientimpact_ux_link_alter(&$variables) {
  $componentManager = \Drupal::service(
    'plugin.manager.ambientimpact_component'
  );

  if ($variables['url']->isExternal()) {
    $componentManager->getComponentInstance('link.external')
      ->processExternalLink($variables);
  }

  $componentManager->getComponentInstance('link.image')
    ->processLink($variables);
}
