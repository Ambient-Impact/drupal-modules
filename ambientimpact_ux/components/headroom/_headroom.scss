// -----------------------------------------------------------------------------
//  Ambient.Impact - UX - Headroom.js component partial
// -----------------------------------------------------------------------------

@use 'immerse';
@use 'sass/variables/motion';

///
/// The easing or timing function to use for Headroom.js element transitions.
///
$headroom-easing: motion.$easing-sharp !default;

///
/// The transition duration to use for Headroom.js elements.
///
$headroom-duration: 200ms !default;

///
/// The transform value to apply to pinned (visible) Headroom.js elements.
///
/// This is set to -1px to avoid rounding errors in browsers that may result in
/// a 1px gap being visible, e.g. in Chromium/Blink.
///
$headroom-translate-pinned: -1px !default;

///
/// The transform value to apply to unpinned (hidden) Headroom.js elements.
///
/// This is set a bit higher than 100% to account for and sufficiently hide drop
/// shadows on the element.
///
$headroom-translate-unpinned: -105% !default;

///
/// The base styles for Headroom.js elements.
///
@mixin headroom-base {
  position: sticky;

  // The CSS 'top' value for sticky positioning. Defaults to --displace-top if
  // it's defined, or 0 if it isn't defined. Note that this is not the same as
  // the Headroom top/bottom offset, which is what Headroom uses to decide when
  // an element has hit the relevant edge and should transition to hidden.
  --headroom-top:       var(--displace-top, 0);
  --headroom-duration:  #{$headroom-duration};
  --headroom-easing:    #{$headroom-easing};

  --headroom-translate-pinned:    #{$headroom-translate-pinned};
  --headroom-translate-unpinned:  #{$headroom-translate-unpinned};

  // Sticky positioning uses 'top' to determine the offset from the top of the
  // viewport or scroll container to stick to, and when to go from behaving like
  // static/relative to behaving more like fixed.
  top: var(--headroom-top);

  transition-property:        transform;
  transition-duration:        var(--headroom-duration);
  transition-timing-function: var(--headroom-easing);

  will-change: transform;
}

///
/// Styles for pinned (visible) Headroom.js elements.
///
@mixin headroom-pinned {
  transform: translateY(var(--headroom-translate-pinned));
}

///
/// Styles for unpinned (hidden) Headroom.js elements.
///
@mixin headroom-unpinned {
  transform: translateY(var(--headroom-translate-unpinned));
}

///
/// Hide Headroom.js elements on immerse mode.
///
/// If you're doing any complex layout stuff with Headroom elements being offset
/// from the top, you'd normally only want to do this if the Headroom element is
/// not at the top of the scrolling area, and also only apply a higher z-index
/// at that time as well, i.e. only when it's stuck to the top of the scrolling
/// area.
///
/// @see {mixin} on-immerse
///
@mixin headroom-immerse {
  // Hide when in immerse mode.
  @include immerse.on-immerse {
    @include headroom-unpinned;
  }
}
