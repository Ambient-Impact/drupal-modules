// -----------------------------------------------------------------------------
//  Ambient.Impact - UX - Material ripple component partial
// -----------------------------------------------------------------------------

// @link https://codepen.io/jproffitt71/pen/PBPKmw

@use 'sass:color';
@use 'sass:math';
@use 'sass:meta';
@use 'sass/helpers/event';

///
/// The Material ripple fallback radius if rippling from the centre.
///
/// From the linked Pen:
/// > the radius of circle that would encompass the corners of a 1:1 square
/// > button as the worst case when rippling from the center.
///
/// @require {function} sqrt
///
/// @link https://codepen.io/jproffitt71/pen/PBPKmw
///   Based on this Pen by Jessie Proffitt.
///
$material-ripple-fallback-radius: math.div(100% * math.sqrt(2), 2) !default;

///
/// The Material ripple base class.
///
/// This is added via JavaScript and is used to derive BEM modifier classes.
/// This is only provided to use so that hard-coding the class is not necessary,
/// so overriding this is not recommended.
///
$material-ripple-base-class: 'material-ripple';

///
/// Apply a Material ripple to an element.
///
/// Requires the 'material-ripple' keyframes found in material.ripple.scss.
///
/// Can work without JavaScript, but has the following limitations that the
/// JavaScript provides:
///
///   - Cannot use pointer event coordinates, ripple is always centred.
///
///   - Cannot continue playing the ripple animation if the element is no longer
///     focused before the animation ends; the animation simply resets to the
///     start state.
///
/// @link https://codepen.io/jproffitt71/pen/PBPKmw
///   Based on this Pen by Jessie Proffitt.
///
/// @require $material-ripple-base-class
///   Used to derive BEM modifier classes.
///
@mixin material-ripple {
  @supports #{'(--test: orange)'} {
    --material-ripple-duration: 0.8s;

    // Setting this to 1px anti-aliases the edge, which can be jagged depending
    // on the browser. This is normally only visible if a new page is navigated
    // to before the ripple completes, in which case it will get frozen in place
    // until the new page starts rendering.
    --material-ripple-blur-radius: 1px;

    &:active,
    &.#{$material-ripple-base-class}--ripple-active {
      &:not(:disabled) {
        background-image:
          // This is the ripple itself.
          radial-gradient(
            circle closest-side at center,
            var(--material-ripple-colour) 0%,
            var(--material-ripple-colour)
              calc(100% - var(--material-ripple-blur-radius)),
            transparent 100%
          ),
          // This is used for simulating a fade out.
          linear-gradient(
            180deg, var(--material-ripple-colour) 10%, transparent 90%
          );
        background-size:    0 0, 0 0;
        background-repeat:  no-repeat;
        background-origin:  border-box;
        animation: material-ripple var(--material-ripple-duration) ease-in;
      }
    }

    &.#{$material-ripple-base-class}--ripple-reset:not(
      .#{$material-ripple-base-class}--input-active
    ) {
      // Reset the animation unless a form input is focused, so that keystrokes
      // don't trigger a ripple more than once.
      animation: none !important;
    }

    // Remove the default tap highlight in WebKit and Blink, as it's redundant.
    -webkit-tap-highlight-color: transparent;
  }
}

///
/// Set an appropriate Material ripple colour given a background and foreground.
///
/// This should only be used in situations where the colour.set() mixin
/// is impractical to use or would cause unwanted side-effects.
///
/// @param {Color} $background-colour
///   The background colour of the current element.
///
/// @param {Color} $foreground-colour
///   The foreground colour of the current element.
///
/// @require {function} ripple-colour
///
@mixin ripple-colour($background-colour, $foreground-colour) {
  --material-ripple-colour: #{ripple-colour(
    $background-colour, $foreground-colour
  )};
}

///
/// Get an appropriate Material ripple colour given a background and foreground.
///
/// @param {Color} $background-colour
///   The background colour of the current element.
///
/// @param {Color} $foreground-colour
///   The foreground colour of the current element.
///
@function ripple-colour($background-colour, $foreground-colour) {
  @return color.adjust($foreground-colour, $alpha: -0.6);
}

///
/// 'set-colours' callback to set Material ripple colour.
///
/// @param {Color} $background-colour
///   The background colour of the current element.
///
/// @param {Color} $foreground-colour
///   The foreground colour of the current element.
///
/// @require {function} ripple-colour
///
@function _set-colours-callback($background-colour, $foreground-colour) {
  @return ripple-colour($background-colour, $foreground-colour);
}

// _set-colours-callback() event callback registration.
@include event.on(
  'set-colours',
  '--material-ripple-colour',
  meta.get-function('_set-colours-callback')
);
