// -----------------------------------------------------------------------------
//   Ambient.Impact - UX - Content pop-up component demo
// -----------------------------------------------------------------------------

AmbientImpact.on([
  'contentPopUp',
  'componentDemo',
], function(aiContentPopUp, aiComponentDemo) {
AmbientImpact.addComponent('contentPopUpDemo', function(aiContentPopUpDemo, $) {
  'use strict';

  /**
   * The class of the hidden container generated by ContentPopUp::getDemo().
   *
   * @type {String|Undefined}
   */
  var panelsContainerClass = aiComponentDemo.getDemoContentContainer()
    .children().first()
      .data('base-class');

  if (typeof panelsContainerClass === 'undefined') {
    console.error(
      Drupal.t('The content pop-up container class cannot be found.')
    );

    return;
  }

  /**
   * An object containing information about the various demo panels.
   *
   * This will contain the following key/value pairs:
   * - $panel: the panel element, wrapped in a jQuery object.
   *
   * - $title: the panel title, wrapped in a jQuery object.
   *
   * - $content: the panel content, wrapped in a jQuery object.
   *
   * - actionLabel: the label to give the action (button) that opens this panel.
   *
   * - settings: the settings to pass to the aiContentPopUp component.
   *
   * @type {Object}
   */
  var panels = {};

  /**
   * The demo object to be passed to the aiComponentDemo component.
   *
   * The actions are generated based on the discovered panels generated by
   * ContentPopUp::getDemo().
   *
   * @type {Object}
   */
  var demoObject = {
    machineName:  'contentPopUp',
    actions:      {}
  };

  // Loop through all demo panels generated by the back-end and build the panels
  // object.
  $('.' + panelsContainerClass).children().each(function() {
    var $this = $(this);

    var themeName = $this.data('content-popup-theme');

    panels[themeName] = {
      $panel:       $this,
      $title:       $this.data('action-label'),
      $content:     $this.children(),
      actionLabel:  $this.data('action-label'),
      settings:     {
        theme: themeName
      }
    };

    demoObject.actions[themeName] = {
      label: panels[themeName].actionLabel
    };
  });

  // Attempt to create the demo actions with the built object, but don't proceed
  // if the demo wasn't successfully created.
  if (aiComponentDemo.addDemo(demoObject) === false) {
    return;
  }

  // Build the remaining panel settings and prepare the panel elements to be
  // used by the content pop-up component.
  $.each(panels, function(themeName, panel) {
    if (!('$action' in demoObject.actions[themeName])) {
      return;
    }

    var actionObject = demoObject.actions[themeName];

    actionObject.$action
      // Use .one() so that we don't have to worry about removing the handler as
      // it's removed after the first triggering after this.
      .one('contentPopUpContent.aiContentPopUpDemo', function(
        event, $title, $content
      ) {
        $title.append(panels[themeName].$title);
        $content.append(panels[themeName].$content);
      });

    aiContentPopUp.addItems(
      actionObject.$action, panels[themeName].settings
    );
  });
});
});
