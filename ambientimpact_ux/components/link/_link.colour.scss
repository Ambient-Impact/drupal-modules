// -----------------------------------------------------------------------------
//   Ambient.Impact - UX - Link component colour partial
// -----------------------------------------------------------------------------

@use 'link.state' as link-state;
@use 'link.var' as *;
@use 'sass:color';
@use 'sass:map';
@use 'sass:meta';
@use 'sass/helpers/colour';

///
/// Get the active link colour for a given base colour.
///
/// This function is used to automatically generate link active colours if no
/// such colours are explicitly defined.
///
/// @param {Color} $base-colour
///   The colour to modify and return as the active colour. This is usually the
///   highlighted colour of the link. This is ignored if $active-colour is not
///   auto.
///
/// @param {String|Color} $active-colour [auto]
///   If this is auto, the active colour is generated by modifying $base-colour.
///   If the function get-link-active-colour-callback() exists, it will be
///   passed the base colour; if it doesn't exist, $base-colour is run through
///   transparentize() with $transparentize-amount as the second parameter.
///
/// @param {Number} $transparentize-amount [0.4]
///   The amount to transparentize() $base-colour by, if the
///   get-link-active-colour-callback() function doesn't exist and
///   $active-colour is auto.
///
/// @see {function} get
///   Used here.
///
/// @todo Rework the get-link-active-colour-callback() as an event.
///
@function get-active-colour(
  $base-colour,
  $active-colour: auto,
  $transparentize-amount: 0.4
) {
  @if $active-colour == auto {
    @if meta.function-exists('get-link-active-colour-callback') {
      @return meta.call(
        meta.get-function('get-link-active-colour-callback'), $base-colour
      );
    } @else {
      @return color.adjust($base-colour, $alpha: -$transparentize-amount);
    }
  } @else {
    @return $active-colour;
  }
}

///
/// Set link colour properties based on background colour.
///
/// @param {Color} $background [$background-colour]
///   The background colour the link is on.
///
/// @param {Color} $normal-on-light [$normal-colour-on-light]
///   Link colour on light backgrounds when not hovered/activated.
///
/// @param {Color} $highlight-on-light [$highlight-colour-on-light]
///   Link colour on light backgrounds when hovered/focused.
///
/// @param {Color} $active-on-light [$active-colour-on-light]
///   Link colour on light backgrounds when activated.
///
/// @param {Color} $underline-normal-on-light [$underline-normal-colour-on-light]
///   Link underline colour on light backgrounds when not hovered/activated.
///
/// @param {Color} $underline-highlight-on-light [$underline-highlight-colour-on-light]
///   Link underline colour on light backgrounds when hovered/focused.
///
/// @param {Color} $underline-active-on-light [$underline-active-colour-on-light]
///   Link underline colour on light backgrounds when activated.
///
/// @param {Color} $normal-on-dark [$normal-colour-on-dark]
///   Link colour on dark backgrounds when not highdarked/activated.
///
/// @param {Color} $highlight-on-dark [$highlight-colour-on-dark]
///   Link colour on dark backgrounds when hovered/focused.
///
/// @param {Color} $active-on-dark [$active-colour-on-dark]
///   Link colour on dark backgrounds when activated.
///
/// @param {Color} $underline-normal-on-dark [$underline-normal-colour-on-dark]
///   Link underline colour on dark backgrounds when not highdarked/activated.
///
/// @param {Color} $underline-highlight-on-dark [$underline-highlight-colour-on-dark]
///   Link underline colour on dark backgrounds when hovered/focused.
///
/// @param {Color} $underline-active-on-dark [$underline-active-colour-on-dark]
///   Link underline colour on dark backgrounds when activated.
///
/// @require {function} get
/// @require {mixin}    custom-properties
/// @require {function} custom-property
///
@mixin set(
  $background: $background-colour,

  $normal-on-light:     $normal-colour-on-light,
  $highlight-on-light:  $highlight-colour-on-light,
  $active-on-light:     $active-colour-on-light,

  $underline-normal-on-light:     $underline-normal-colour-on-light,
  $underline-highlight-on-light:  $underline-highlight-colour-on-light,
  $underline-active-on-light:     $underline-active-colour-on-light,

  $normal-on-dark:    $normal-colour-on-dark,
  $highlight-on-dark: $highlight-colour-on-dark,
  $active-on-dark:    $active-colour-on-dark,

  $underline-normal-on-dark:    $underline-normal-colour-on-dark,
  $underline-highlight-on-dark: $underline-highlight-colour-on-dark,
  $underline-active-on-dark:    $underline-active-colour-on-dark
) {
  $colours: get(
    $background,

    $normal-on-light,
    $highlight-on-light,
    $active-on-light,

    $underline-normal-on-light,
    $underline-highlight-on-light,
    $underline-active-on-light,

    $normal-on-dark,
    $highlight-on-dark,
    $active-on-dark,

    $underline-normal-on-dark,
    $underline-highlight-on-dark,
    $underline-active-on-dark
  );

  @include custom-properties($background, $colours);

  color: var(--link-normal-colour, map.get($colours, normal));

  text-decoration-color: var(
    --link-underline-normal-colour,
    #{map.get($colours, underline-normal)}
  );

  @include link-state.highlight {

    color: var(--link-highlight-colour, map.get($colours, hover));

    text-decoration-color: var(
      --link-underline-highlight-colour,
      #{map.get($colours, underline-highlight)}
    );

  }
  @include link-state.active {

    color: var(--link-active-colour, map.get($colours, active)) !important;

    text-decoration-color: var(
      --link-underline-active-colour,
      #{map.get($colours, underline-active)}
    );

  }
}

///
/// Get link colour values based on background colour.
///
/// @param {Color} $background [$background-colour]
///   The background colour the link is on.
///
/// @param {Color} $normal-on-light [$normal-colour-on-light]
///   Link colour on light backgrounds when not hovered/activated.
///
/// @param {Color} $highlight-on-light [$highlight-colour-on-light]
///   Link colour on light backgrounds when hovered/focused.
///
/// @param {Color} $active-on-light [$active-colour-on-light]
///   Link colour on light backgrounds when activated.
///
/// @param {Color} $underline-normal-on-light [$underline-normal-colour-on-light]
///   Link underline colour on light backgrounds when not hovered/activated.
///
/// @param {Color} $underline-highlight-on-light [$underline-highlight-colour-on-light]
///   Link underline colour on light backgrounds when hovered/focused.
///
/// @param {Color} $underline-active-on-light [$underline-active-colour-on-light]
///   Link underline colour on light backgrounds when activated.
///
/// @param {Color} $normal-on-dark [$normal-colour-on-dark]
///   Link colour on dark backgrounds when not highdarked/activated.
///
/// @param {Color} $highlight-on-dark [$highlight-colour-on-dark]
///   Link colour on dark backgrounds when hovered/focused.
///
/// @param {Color} $active-on-dark [$active-colour-on-dark]
///   Link colour on dark backgrounds when activated.
///
/// @param {Color} $underline-normal-on-dark [$underline-normal-colour-on-dark]
///   Link underline colour on dark backgrounds when not highdarked/activated.
///
/// @param {Color} $underline-highlight-on-dark [$underline-highlight-colour-on-dark]
///   Link underline colour on dark backgrounds when hovered/focused.
///
/// @param {Color} $underline-active-on-dark [$underline-active-colour-on-dark]
///   Link underline colour on dark backgrounds when activated.
///
/// @return {Map}
///   A map of link and link underline colours for normal, hovered, and active
///   states.
///
/// @require {function} get-contrasting-colour
/// @require {function} get-active-colour
///
@function get(
  $background: colour.$background,

  $normal-on-light:     $normal-colour-on-light,
  $highlight-on-light:  $highlight-colour-on-light,
  $active-on-light:     $active-colour-on-light,

  $underline-normal-on-light:     $underline-normal-colour-on-light,
  $underline-highlight-on-light:  $underline-highlight-colour-on-light,
  $underline-active-on-light:     $underline-active-colour-on-light,

  $normal-on-dark:    $normal-colour-on-dark,
  $highlight-on-dark: $highlight-colour-on-dark,
  $active-on-dark:    $active-colour-on-dark,

  $underline-normal-on-dark:    $underline-normal-colour-on-dark,
  $underline-highlight-on-dark: $underline-highlight-colour-on-dark,
  $underline-active-on-dark:    $underline-active-colour-on-dark
) {
  $colours: ();

  $contrasting-colour: colour.get-contrasting(
    $background:          $background,
    $foreground-on-light: $normal-on-light,
    $foreground-on-dark:  $normal-on-dark
  );

  @if ($contrasting-colour == $normal-on-light) {
    $colours: (
      normal:           $normal-on-light,
      hover:            $highlight-on-light,
      active:           get-active-colour(
        $highlight-on-light, $active-on-light
      ),

      underline-normal: $underline-normal-on-light,
      underline-highlight:  $underline-highlight-on-light,
      underline-active: get-active-colour(
        $underline-highlight-on-light, $underline-active-on-light
      )
    );

  } @else if ($contrasting-colour == $normal-on-dark) {
    $colours: (
      normal:           $normal-on-dark,
      hover:            $highlight-on-dark,
      active:           get-active-colour($highlight-on-dark, $active-on-dark),

      underline-normal: $underline-normal-on-dark,
      underline-highlight:  $underline-highlight-on-dark,
      underline-active: get-active-colour(
        $underline-highlight-on-dark, $underline-active-on-dark
      )
    );
  }

  @return $colours;
}

///
/// Set link colour CSS custom properties on the current element.
///
/// @param {Color} $background [$background-colour]
///   The background colour the link is on.
///
/// @param {Map|Null} $colours [null]
///   A map of link colours returned from the get() function, or
///   null. This is useful if you don't want to generate the colours more than
///   once, for performance during compilation. If null, will call the function.
///
/// @require {function} get
///
@mixin custom-properties(
  $background:  colour.$background,
  $colours:     null
) {

  @if ($colours == null) {
    $colours: get($background);
  }

  --link-normal-colour:     #{map.get($colours, 'normal')};
  --link-highlight-colour:  #{map.get($colours, 'hover')};
  --link-active-colour:     #{map.get($colours, 'active')};

  --link-underline-normal-colour: #{map.get($colours, 'underline-normal')};
  --link-underline-highlight-colour:
    #{map.get($colours, 'underline-highlight')};
  --link-underline-active-colour: #{map.get($colours, 'underline-active')};

}
