/* -----------------------------------------------------------------------------
	Ambient.Impact - Core - Framework cache functionality
----------------------------------------------------------------------------- */


AmbientImpact.onGlobals([
	'drupalSettings.AmbientImpact.framework.cache.assetKey',
], function() {
	'use strict';

	var	cacheSettings	= drupalSettings.AmbientImpact.framework.cache,
		// The localStorage key the asset key is stored in.
		storageKey		= 'AmbientImpact.framework.cache.assetKey',

		// Has the Drupal cache been rebuilt on this page load? We default to
		// true unless we find a valid stored cache key that matches the
		// drupalSettings value. If localStorage isn't supported, this will
		// always be true.
		isCacheRebuilt	= true;

	/**
	 * Get the current cache key as generated by Drupal.
	 *
	 * This uses the asset (CSS/JS) query string as the asset key.
	 *
	 * @return {String}
	 *   If localStorage is available, will be the stored value. If localStorage
	 *   is not available or the stored value doesn't exist, will return the
	 *   value found in drupalSettings.
	 */
	AmbientImpact.constructor.prototype.getCacheKey = function() {
		if (!('localStorage' in window)) {
			return cacheSettings.assetKey;
		}

		var storedValue = localStorage.getItem(storageKey);

		return (
			typeof storedValue === 'string' ?
			storedValue : cacheSettings.assetKey
		);
	};

	/**
	 * Determine if the Drupal cache has just been rebuilt on this page load.
	 *
	 * @return {Boolean}
	 *   The value of isCacheRebuilt.
	 */
	AmbientImpact.constructor.prototype.isCacheRebuilt = function() {
		return isCacheRebuilt;
	};

	if ('localStorage' in window) {
		// Update isCacheRebuilt by comparing the retrieved value from storage
		// to the value passed to us from the back-end.
		isCacheRebuilt = AmbientImpact.getCacheKey() !== cacheSettings.assetKey;

		// Overwrite the value in storage with the new one, if any.
		localStorage.setItem(storageKey, cacheSettings.assetKey);
	}
});
