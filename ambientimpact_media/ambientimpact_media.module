<?php

use Drupal\Component\Utility\NestedArray;
use Drupal\file\Entity\File;
use GuzzleHttp\Client as GuzzleClient;
use Drupal\ambientimpact_media\Event\OEmbed\OEmbedResourceDataAlterEvent;

/**
 * Implements hook_field_formatter_info_alter().
 *
 * This replaces the core 'image' and contrib
 * 'image_formatter_link_to_image_style' formatters with our own, which extend
 * the default formatters with functionality that the PhotoSwipe component
 * requires.
 *
 * @see \Drupal\ambientimpact_media\Plugin\Field\FieldFormatter\ImageFormatter
 *   Our 'image' field formatter override class.
 *
 * @see \Drupal\ambientimpact_media\Plugin\Field\FieldFormatter\ImageFormatterLinkToImageStyleFormatter
 *   Our 'image_formatter_link_to_image_style' field formatter override class.
 */
function ambientimpact_media_field_formatter_info_alter(array &$info) {
  if (
    isset($info['image']) &&
    // Only if this is the core formatter class to avoid breaking other modules.
    $info['image']['class'] ===
      'Drupal\image\Plugin\Field\FieldFormatter\ImageFormatter'
  ) {
    $info['image']['class'] =
      'Drupal\ambientimpact_media\Plugin\Field\FieldFormatter\ImageFormatter';
    $info['image']['provider'] = 'ambientimpact_media';
  }

  if (isset($info['image_formatter_link_to_image_style'])) {
    $info['image_formatter_link_to_image_style']['class'] =
      'Drupal\ambientimpact_media\Plugin\Field\FieldFormatter\ImageFormatterLinkToImageStyleFormatter';
    $info['image_formatter_link_to_image_style']['provider'] = 'ambientimpact_media';
  }
}

/**
 * Implements hook_field_formatter_third_party_settings_form().
 *
 * This adds provider/play icon form elements for image formatters on
 * remote_video media entities.
 *
 * This adds the PhotoSwipe image field formatter form elements.
 *
 * @see https://www.drupal.org/node/2130757
 *   Change record; describes the third party settings usage.
 *
 * @see https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Config%21Entity%21ThirdPartySettingsInterface.php/interface/ThirdPartySettingsInterface
 *   API documentation for third party settings on entities.
 */
function ambientimpact_media_field_formatter_third_party_settings_form(
  \Drupal\Core\Field\FormatterInterface $plugin,
  \Drupal\Core\Field\FieldDefinitionInterface $fieldDefinition,
  $viewMode,
  $form,
  \Drupal\Core\Form\FormStateInterface $formState
) {
  $elements = [];
  $pluginID = $plugin->getPluginId();

  if (
    $pluginID === 'image' &&
    $form['#entity_type'] === 'media' &&
    $form['#bundle'] === 'remote_video'
  ) {
    $elements['play_icon'] = [
      '#type'           => 'checkbox',
      '#title'          => t('Show provider/play icon'),
      '#description'    => t('If enabled, will overlay a provider-specific play icon (e.g. YouTube or Vimeo) over the thumbnail, or a generic play icon if the provider is not recognized.'),
      '#default_value'  =>
        $plugin->getThirdPartySetting('ambientimpact_media', 'play_icon'),
    ];
  }

  if (in_array($pluginID, [
    'image',
    'image_formatter_link_to_image_style',
  ])) {
    $elements['use_photoswipe'] = [
      '#type'           => 'checkbox',
      '#title'          => t('Use PhotoSwipe'),
      '#description'    => t('If enabled, will use the <a href="https://photoswipe.com/" target="_blank">PhotoSwipe</a> JavaScript library to display linked images.'),
      '#default_value'  => $plugin->getThirdPartySetting(
        'ambientimpact_media', 'use_photoswipe'
      ),
    ];
    $elements['use_photoswipe_gallery'] = [
      '#type'           => 'checkbox',
      '#title'          => t('Group as PhotoSwipe gallery'),
      '#description'    => t('If enabled, will group all items in this field as a PhotoSwipe gallery.'),
      '#default_value'  => $plugin->getThirdPartySetting(
        'ambientimpact_media', 'use_photoswipe_gallery'
      ),
      '#states'   => [
        'visible'   => [
          // This hides this item if 'use_photoswipe' is not checked.
          ':input[name*="[ambientimpact_media][use_photoswipe]"]' => [
            'checked' => true,
          ],
        ],
      ],
    ];

    $elements['use_animated_gif_toggle'] = [
      '#type'           => 'checkbox',
      '#title'          => t('Use animated GIF toggle'),
      '#description'    => t('If enabled and displaying an image style, will allow users to toggle between the static image style and the original animated GIF.'),
      '#default_value'  => $plugin->getThirdPartySetting(
        'ambientimpact_media', 'use_animated_gif_toggle'
      ),
    ];
  }

  return $elements;
}

/**
 * Implements hook_field_formatter_settings_summary_alter().
 *
 * This displays a message on image formatters linked to 'remote' and on video
 * embed field thumbnail formatters if the provider/play icon is shown over the
 * thumbnail.
 *
 * This displays PhotoSwipe summary information for image field formatters.
 *
 * @see https://www.drupal.org/node/2130757
 *   Change record; describes the third party settings usage.
 *
 * @see https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Config%21Entity%21ThirdPartySettingsInterface.php/interface/ThirdPartySettingsInterface
 *   API documentation for third party settings on entities.
 */
function ambientimpact_media_field_formatter_settings_summary_alter(
  &$summary, $context
) {
  $pluginID = $context['formatter']->getPluginId();

  if (
    $pluginID === 'image' &&
    // The 'remote' image link option is currently on available on the
    // 'remote_video' media entity.
    $context['formatter']->getSetting('image_link') === 'remote' &&
    // This is passed to us as a string ('1' or '0'), despite the schema
    // specifying it as boolean, likely because this is at the Form API stage
    // where checkbox values are treated as strings.
    (bool) $context['formatter']->getThirdPartySetting(
      'ambientimpact_media', 'play_icon'
    ) === true
  ) {
    $summary[] = t('Play icon shown');
  }

  if (in_array($pluginID, [
    'image',
    'image_formatter_link_to_image_style',
  ])) {
    // This is passed to us as a string ('1' or '0'), despite the schema
    // specifying it as boolean, likely because this is at the Form API stage
    // where checkbox values are treated as strings.
    if ((bool) $context['formatter']->getThirdPartySetting(
      'ambientimpact_media', 'use_photoswipe'
    ) === true) {
      if ((bool) $context['formatter']->getThirdPartySetting(
        'ambientimpact_media', 'use_photoswipe_gallery'
      ) === true) {
        $summary[] = t('Uses PhotoSwipe; grouped as gallery');
      } else {
        $summary[] = t('Uses PhotoSwipe');
      }
    }

    $linkedTo = $context['formatter']->getSetting('image_link');

    if (
      (bool) $context['formatter']->getThirdPartySetting(
        'ambientimpact_media', 'use_animated_gif_toggle'
      ) === true &&
      (
        $pluginID === 'image_formatter_link_to_image_style' ||
        // Only display if we're set to link to the file or entity on the
        // 'image' formatter, as we don't link to anything otherwise.
        $linkedTo === 'file' || $linkedTo === 'content'
      )
    ) {
      $summary[] = t('Uses animated GIF toggle');
    }
  }
}

/**
 * Implements hook_theme_registry_alter().
 *
 * This adds the 'use_animated_gif_toggle' variable to the 'image_formatter',
 * 'image_formatter_link_to_image_style_formatter', and
 * 'image_caption_formatter' items so that that setting can make it through to
 * our preprocess functions.
 *
 * This defines the 'link_attributes' variable for the 'image_formatter',
 * 'image_formatter_link_to_image_style_formatter', and
 * 'image_caption_formatter' elements.
 *
 * This defines the 'use_remote_video_play_icon', 'remote_video_provider_name', and
 * 'remote_video_media_name' variables for the 'image_formatter',
 * 'image_formatter_link_to_image_style_formatter', and
 * 'image_caption_formatter' elements.
 *
 * This defines the 'ratio' variable for the 'image' element.
 *
 * This changes the 'image_formatter_link_to_image_style_formatter' default
 * value for the 'url_attributes' variable to an empty array, from null.
 *
 * This defines the 'use_ratio' and 'constrain_width' variables for the 'image',
 * 'image_style', and 'image_caption_formatter' elements.
 *
 * @see ambientimpact_media_preprocess_image_formatter()
 *   Passes variables to the Animated GIF toggle component.
 *
 * @see ambientimpact_media_preprocess_image_formatter_link_to_image_style_formatter()
 *   Passes variables to the Animated GIF toggle component.
 *
 * @see ambientimpact_media_preprocess_image_caption_formatter()
 *   Passes variables to the Animated GIF toggle component.
 */
function ambientimpact_media_theme_registry_alter(&$themeRegistry) {
  foreach ([
    'image_formatter',
    'image_formatter_link_to_image_style_formatter',
    'image_caption_formatter',
  ] as $type) {
    if (isset($themeRegistry[$type])) {
      $themeRegistry[$type]['variables']['use_animated_gif_toggle'] = false;
      $themeRegistry[$type]['variables']['use_remote_video_play_icon'] = false;
      $themeRegistry[$type]['variables']['remote_video_provider_name'] = false;
      $themeRegistry[$type]['variables']['remote_video_media_name'] = false;
      $themeRegistry[$type]['variables']['link_attributes'] = [];
    }
  }

  if (isset($themeRegistry['image'])) {
    $themeRegistry['image']['variables']['ratio'] = null;
  }

  if (isset($themeRegistry['image_formatter_link_to_image_style_formatter'])) {
    $themeRegistry['image_formatter_link_to_image_style_formatter']['variables']
      ['url_attributes'] = [];
  }

  foreach ([
    'image',
    'image_style',
    'image_caption_formatter',
  ] as $type) {
    if (isset($themeRegistry[$type])) {
      $themeRegistry[$type]['variables']['use_ratio'] = true;
      $themeRegistry[$type]['variables']['constrain_width'] = true;
    }
  }
}

/**
 * Prepares variables for image formatter templates.
 *
 * Default template: image-formatter.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *
 *   - item: An ImageItem object.
 *
 *   - item_attributes: An optional associative array of html attributes to be
 *     placed in the img tag.
 *
 *   - image_style: An optional image style.
 *
 *   - url: An optional \Drupal\Core\Url object.
 *
 * @see \Drupal\ambientimpact_media\Plugin\AmbientImpact\Component\AnimatedGIFToggle::preprocessImageFormatter()
 *   Variables are passed to this for modification.
 */
function ambientimpact_media_preprocess_image_formatter(&$variables) {
  \Drupal::service('plugin.manager.ambientimpact_component')
    ->getComponentInstance('animated_gif_toggle')
      ->preprocessImageFormatter($variables);
}

/**
 * Prepares variables for image link to image style formatter templates.
 *
 * Default template: image-formatter-link-to-image-style-formatter.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *
 *   - item: An ImageItem object.
 *
 *   - item_attributes: An optional associative array of html attributes to be
 *     placed in the img tag.
 *
 *   - image_style: An optional image style.
 *
 *   - url: A \Drupal\Core\Url object.
 *
 *   - link_attributes: An array of attributes to add to the link if 'url' is
 *     set.
 *
 * @see \Drupal\ambientimpact_media\Plugin\AmbientImpact\Component\AnimatedGIFToggle::preprocessImageFormatter()
 *   Variables are passed to this for modification.
 */
function ambientimpact_media_preprocess_image_formatter_link_to_image_style_formatter(
  array &$variables
) {
  if (!empty($variables['url_attributes'])) {
    $variables['link_attributes'] = NestedArray::mergeDeep(
      $variables['url_attributes'],
      $variables['link_attributes']
    );
  }

  \Drupal::service('plugin.manager.ambientimpact_component')
    ->getComponentInstance('animated_gif_toggle')
      ->preprocessImageFormatter($variables);
}

/**
 * Prepares variables for image caption formatter templates.
 *
 * Default template: image-caption-formatter.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *
 *   - item: An ImageItem object.
 *
 *   - item_attributes: An optional associative array of html attributes to be
 *     placed in the img tag.
 *
 *   - image_style: An optional image style.
 *
 *   - url: An optional \Drupal\Core\Url object.
 *
 *   - link_attributes: An array of attributes to add to the link if 'url' is
 *     set.
 *
 *   - caption: An optional caption text.
 *
 * @see \Drupal\ambientimpact_media\Plugin\AmbientImpact\Component\AnimatedGIFToggle::preprocessImageFormatter()
 *   Variables are passed to this for modification.
 *
 * @see \Drupal\ambientimpact_media\Plugin\AmbientImpact\Component\RemoteVideo::preprocessImageFormatter()
 *   Variables are passed to this for modification.
 */
function ambientimpact_media_preprocess_image_caption_formatter(&$variables) {
  // Pass the constrain_width variable on to the image element. This must be
  // placed before we pass anything to the components below or the variable may
  // not make it through all the way to the image template.
  $variables['image']['#constrain_width'] = $variables['constrain_width'];

  /** @var \Drupal\ambientimpact_coreComponentPluginManagerInterface The component manager service. */
  $componentManager =
    \Drupal::service('plugin.manager.ambientimpact_component');

  $componentManager->getComponentInstance('animated_gif_toggle')
    ->preprocessImageFormatter($variables);

  $componentManager->getComponentInstance('remote_video')
    ->preprocessImageFormatter($variables);
}

/**
 * Prepares variables for image style templates.
 *
 * Default template: image-style.html.twig.
 *
 * This copies the 'use_ratio' and 'constrain_width' variables over to
 * $variables['image'] so that the values are inherited to the generated image.
 *
 * @param array $variables
 *   An associative array containing:
 *
 *   - width: The width of the image.
 *
 *   - height: The height of the image.
 *
 *   - style_name: The name of the image style to be applied.
 *
 *   - uri: URI of the source image before styling.
 *
 *   - alt: The alternative text for text-based browsers. HTML 4 and XHTML 1.0
 *     always require an alt attribute. The HTML 5 draft allows the alt
 *     attribute to be omitted in some cases. Therefore, this variable defaults
 *     to an empty string, but can be set to NULL for the attribute to be
 *     omitted. Usually, neither omission nor an empty string satisfies
 *     accessibility requirements, so it is strongly encouraged for code using
 *     '#theme' => 'image_style' to pass a meaningful value for this variable.
 *     - http://www.w3.org/TR/REC-html40/struct/objects.html#h-13.8
 *     - http://www.w3.org/TR/xhtml1/dtds.html
 *     - http://dev.w3.org/html5/spec/Overview.html#alt
 *
 *   - title: The title text is displayed when the image is hovered in some
 *     popular browsers.
 *
 *   - attributes: Associative array of additional attributes to be placed in
 *     the img tag.
 *
 *   - use_ratio: if true, will instruct templates to wrap the image in an
 *     intrinsic ratio wrapper to act as a placeholder before the image loads,
 *     which prevents layout shifting during loading.
 *
 *   - constrain_width: if true, templates should set a max-width equal to the
 *     natural width of the generated image to prevent phantom clickable areas
 *     if this image is in a link and less wide than the link itself.
 */
function ambientimpact_media_preprocess_image_style(&$variables) {
  foreach (['use_ratio', 'constrain_width'] as $variableName) {
    if (isset($variables[$variableName])) {
      $variables['image']['#' . $variableName] = $variables[$variableName];
    }
  }
}

/**
 * Implements hook_oembed_resource_url_alter().
 *
 * This informs Vimeo to return the thumbnail at the maximum size they support,
 * which is currently 1280 pixels wide.
 *
 * @param array $parsedURL
 *   A parsed URL, as returned by \Drupal\Component\Utility\UrlHelper::parse().
 *
 * @param \Drupal\media\OEmbed\Provider $provider
 *   The oEmbed provider for the resource.
 *
 * @see \Drupal\media\OEmbed\UrlResolverInterface::getResourceUrl()
 */
function ambientimpact_media_oembed_resource_url_alter(
  array &$parsedURL,
  \Drupal\media\OEmbed\Provider $provider
) {
  if (strpos($parsedURL['path'], 'https://vimeo.com/') === 0) {
    $parsedURL['query']['width'] = '1280';
  }
}

/**
 * Implements hook_oembed_resource_data_alter().
 *
 * Provides a Hook Event Dispatcher event for this hook.
 *
 * This tries to fetch the highest available YouTube video thumbnail by sending
 * requests via Guzzle for the various formats from highest to lowest, using the
 * first one that doesn't return a 404.
 *
 * @param array &$data
 *   The oEmbed data, parsed into an array.
 *
 * @param string $url
 *   The oEmbed URL that $data was retrieved from.
 *
 * @see https://www.drupal.org/project/drupal/issues/3042423
 *   This hook won't be invoked unless this Drupal core patch is applied.
 *
 * @see \Drupal\ambientimpact_media\Event\OEmbed\OEmbedResourceDataAlterEvent
 */
function ambientimpact_media_oembed_resource_data_alter(array &$data, $url) {
  /* @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = \Drupal::service('hook_event_dispatcher.manager');

  $manager->register(new OEmbedResourceDataAlterEvent($data, $url));

  if (
    $data['provider_name'] === 'YouTube' &&
    strpos($data['thumbnail_url'], 'hqdefault.jpg') !== false
  ) {
    // Array of thumbnail sizes above 'hqdefault' to try, started with the
    // largest size.
    //
    // @see https://stackoverflow.com/a/20542029
    $thumbnailTypes = [
      'maxresdefault' => [
        'width'   => 1920,
        'height'  => 1080,
      ],
      'sddefault' => [
        'width'   => 640,
        'height'  => 480,
      ],
    ];

    $client = new GuzzleClient();

    foreach ($thumbnailTypes as $thumbnailName => $thumbnailDimensions) {
      // Replace 'hqdefault' in the thumbnail URL with the current type we're
      // testing for.
      $testThumbnailURL = str_replace(
        'hqdefault',
        $thumbnailName,
        $data['thumbnail_url']
      );

      // We need to wrap the request in a try {} catch {} because Guzzle will
      // throw an exception on a 404.
      try {
        $response = $client->request('GET', $testThumbnailURL);

      // Got an exception? Skip to the next thumbnail size, assuming this
      // returned a 404 or ran into some other error.
      } catch (Exception $exception) {
        continue;
      }

      // If this was a 200 response, update the thumbnail URL and dimensions
      // with the higher resolution and break out of the loop.
      if ($response->getStatusCode() === 200) {
        $data['thumbnail_url']    = $testThumbnailURL;
        $data['thumbnail_width']  = $thumbnailDimensions['width'];
        $data['thumbnail_height'] = $thumbnailDimensions['height'];

        break;
      }
    }
  }
}
