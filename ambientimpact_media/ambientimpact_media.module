<?php

use Drupal\Component\Utility\NestedArray;
use Drupal\ambientimpact_media\Event\Media\OEmbedResourceDataAlterEvent;

/**
 * Prepares variables for image formatter templates.
 *
 * Default template: image-formatter.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *
 *   - item: An ImageItem object.
 *
 *   - item_attributes: An optional associative array of html attributes to be
 *     placed in the img tag.
 *
 *   - image_style: An optional image style.
 *
 *   - url: An optional \Drupal\Core\Url object.
 *
 * @see \Drupal\ambientimpact_media\Plugin\AmbientImpact\Component\AnimatedGIFToggle::preprocessImageFormatter()
 *   Variables are passed to this for modification.
 */
function ambientimpact_media_preprocess_image_formatter(&$variables) {
  \Drupal::service('plugin.manager.ambientimpact_component')
    ->getComponentInstance('animated_gif_toggle')
      ->preprocessImageFormatter($variables);
}

/**
 * Prepares variables for image link to image style formatter templates.
 *
 * Default template: image-formatter-link-to-image-style-formatter.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *
 *   - item: An ImageItem object.
 *
 *   - item_attributes: An optional associative array of html attributes to be
 *     placed in the img tag.
 *
 *   - image_style: An optional image style.
 *
 *   - url: A \Drupal\Core\Url object.
 *
 *   - link_attributes: An array of attributes to add to the link if 'url' is
 *     set.
 *
 * @see \Drupal\ambientimpact_media\Plugin\AmbientImpact\Component\AnimatedGIFToggle::preprocessImageFormatter()
 *   Variables are passed to this for modification.
 */
function ambientimpact_media_preprocess_image_formatter_link_to_image_style_formatter(
  array &$variables
) {
  if (!empty($variables['url_attributes'])) {
    $variables['link_attributes'] = NestedArray::mergeDeep(
      $variables['url_attributes'],
      $variables['link_attributes']
    );
  }

  \Drupal::service('plugin.manager.ambientimpact_component')
    ->getComponentInstance('animated_gif_toggle')
      ->preprocessImageFormatter($variables);
}

/**
 * Prepares variables for image caption formatter templates.
 *
 * Default template: image-caption-formatter.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *
 *   - item: An ImageItem object.
 *
 *   - item_attributes: An optional associative array of html attributes to be
 *     placed in the img tag.
 *
 *   - image_style: An optional image style.
 *
 *   - url: An optional \Drupal\Core\Url object.
 *
 *   - link_attributes: An array of attributes to add to the link if 'url' is
 *     set.
 *
 *   - caption: An optional caption text.
 *
 * @see \Drupal\ambientimpact_media\Plugin\AmbientImpact\Component\AnimatedGIFToggle::preprocessImageFormatter()
 *   Variables are passed to this for modification.
 *
 * @see \Drupal\ambientimpact_media\Plugin\AmbientImpact\Component\RemoteVideo::preprocessImageFormatter()
 *   Variables are passed to this for modification.
 */
function ambientimpact_media_preprocess_image_caption_formatter(&$variables) {
  // Pass the constrain_width variable on to the image element. This must be
  // placed before we pass anything to the components below or the variable may
  // not make it through all the way to the image template.
  $variables['image']['#constrain_width'] = $variables['constrain_width'];

  /** @var \Drupal\ambientimpact_coreComponentPluginManagerInterface The component manager service. */
  $componentManager =
    \Drupal::service('plugin.manager.ambientimpact_component');

  $componentManager->getComponentInstance('animated_gif_toggle')
    ->preprocessImageFormatter($variables);

  $componentManager->getComponentInstance('remote_video')
    ->preprocessImageFormatter($variables);
}

/**
 * Prepares variables for image style templates.
 *
 * Default template: image-style.html.twig.
 *
 * This copies the 'use_ratio' and 'constrain_width' variables over to
 * $variables['image'] so that the values are inherited to the generated image.
 *
 * @param array $variables
 *   An associative array containing:
 *
 *   - width: The width of the image.
 *
 *   - height: The height of the image.
 *
 *   - style_name: The name of the image style to be applied.
 *
 *   - uri: URI of the source image before styling.
 *
 *   - alt: The alternative text for text-based browsers. HTML 4 and XHTML 1.0
 *     always require an alt attribute. The HTML 5 draft allows the alt
 *     attribute to be omitted in some cases. Therefore, this variable defaults
 *     to an empty string, but can be set to NULL for the attribute to be
 *     omitted. Usually, neither omission nor an empty string satisfies
 *     accessibility requirements, so it is strongly encouraged for code using
 *     '#theme' => 'image_style' to pass a meaningful value for this variable.
 *     - http://www.w3.org/TR/REC-html40/struct/objects.html#h-13.8
 *     - http://www.w3.org/TR/xhtml1/dtds.html
 *     - http://dev.w3.org/html5/spec/Overview.html#alt
 *
 *   - title: The title text is displayed when the image is hovered in some
 *     popular browsers.
 *
 *   - attributes: Associative array of additional attributes to be placed in
 *     the img tag.
 *
 *   - use_ratio: if true, will instruct templates to wrap the image in an
 *     intrinsic ratio wrapper to act as a placeholder before the image loads,
 *     which prevents layout shifting during loading.
 *
 *   - constrain_width: if true, templates should set a max-width equal to the
 *     natural width of the generated image to prevent phantom clickable areas
 *     if this image is in a link and less wide than the link itself.
 */
function ambientimpact_media_preprocess_image_style(&$variables) {
  foreach (['use_ratio', 'constrain_width'] as $variableName) {
    if (isset($variables[$variableName])) {
      $variables['image']['#' . $variableName] = $variables[$variableName];
    }
  }
}

/**
 * Implements hook_oembed_resource_data_alter().
 *
 * Provides a Hook Event Dispatcher event for this hook.
 *
 * @param array &$data
 *   The oEmbed data, parsed into an array.
 *
 * @param string $url
 *   The oEmbed URL that $data was retrieved from.
 *
 * @see https://www.drupal.org/project/drupal/issues/3042423
 *   This hook won't be invoked unless this Drupal core patch is applied.
 *
 * @see \Drupal\ambientimpact_media\Event\Media\OEmbedResourceDataAlterEvent
 */
function ambientimpact_media_oembed_resource_data_alter(array &$data, $url) {
  /* @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = \Drupal::service('hook_event_dispatcher.manager');

  $manager->register(new OEmbedResourceDataAlterEvent($data, $url));
}
