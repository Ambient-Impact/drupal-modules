// -----------------------------------------------------------------------------
//   Ambient.Impact - Media - PhotoSwipe component
// -----------------------------------------------------------------------------

@use 'sass:math';

@import '../../../ambientimpact_core/stylesheets/_common.scss';

.#{$photoswipe-root-class} {
  // Place this in the floating z-index. This ensures we're above most page
  // elements but below fixed and sticky elements, which are then handled by the
  // immerse component, which we trigger the events for.
  @include z-index('floating');

  &--open {
    // Override the inline display, which is set to be display: none; by default
    // to avoid displaying this if stylesheets don't load for whatever reason.
    display: block !important;
  }

  &__counter {
    // This makes the counter text smaller or larger.
    $multiplier:  0.9;

    font-size:    100% * $multiplier;
    line-height:  $photoswipe-button-size * math.div(1, $multiplier);
  }

  &__caption__center {
    text-align:   center;

    // Override the default stuff so caption uses ems and inherits the
    // document's font-size and line-height.
    max-width:    50em;

    padding:      0.5em;

    font-size:    inherit;
    line-height:  inherit;
  }

  // Share menu.
  &__share-tooltip a {
    font-size:    100%;
    line-height:  inherit;

    .ambientimpact-icon {
      // Since we've removed underlines, align the icon to centre so it
      // doesn't look misaligned next to the text.
      @include set-icon-vertical-alignment('center');

      // Align the whole inline icon container to the middle, so we have
      // more or less the same space above and below the icon + text.
      vertical-align: middle;
    }
  }
  &__share-tooltip a:not(&__share--facebook):not(&__share--twitter) {
    @include link-hover {
      // This contrasts far better with the white icons/text.
      background-color: greyscale(50%);
    }
  }

  // All standalone icons.
  .ambientimpact-icon--icon-standalone {
    @include set-icon-size($photoswipe-icon-size);

    padding:  $photoswipe-icon-padding;

    // Make sure we're using content-box box model, so we don't squish the
    // icon.
    box-sizing: content-box;

    // Blink won't fire events on the buttons if the icon is clicked/tapped.
    pointer-events: none;
  }

  // Buttons and their icons.
  &__button {
    // Hide the text contents of all buttons not enhanced with our icons.
    // We've added text that should help with accessibility, but it's only
    // there for assistive software, which doesn't always pick up the title
    // attribute text.
    &:not(&--has-ambientimpact-icon) {
      @include hide-text;
    }

    &--has-ambientimpact-icon#{&} { // Specificity.
      // Remove the CSS sprite icons that ship with PhotoSwipe when we've
      // added ours. Note that we have to override the media query for
      // higher density displays in default-skin.scss/css, as that can
      // still add the background SVG file as it has higher specificity.
      background-image: none;

      // The left/right icons use this for the icons, so just remove it
      // altogether.
      &::before {
        display:    none;
      }

      width:  $photoswipe-button-size;
      height: $photoswipe-button-size;
    }

    // Left and right arrow buttons with icons.
    &--arrow--left,
    &--arrow--right {
      // Don't hide arrows on touch detection - this removes a cue to the
      // user that they can view other, adjacent images. Tapping the image
      // hides the UI anyways, so this way it's up to the user.
      .#{$photoswipe-root-class}--touch & {
        visibility: visible;
      }
    }

    // Left and right arrow buttons with icons.
    &--arrow--left#{&}--has-ambientimpact-icon,
    &--arrow--right#{&}--has-ambientimpact-icon {
      // Override the size and position with our own values.
      width:    $photoswipe-button-arrow-width;
      height:   $photoswipe-button-arrow-height;

      margin-top: math.div($photoswipe-icon-size, 2) * -1;

      .ambientimpact-icon {
        position:   absolute;
        top:        50%;

        // Vertical centring magic. Only works because we know the exact
        // height of the content. CSS Grid is overkill for this right
        // now.
        margin-top: (
          math.div($photoswipe-icon-size, 2) + $photoswipe-icon-padding
        ) * -1;
      }
    }
    &--arrow--left {
      .ambientimpact-icon {
        left: $photoswipe-icon-spacing;
      }
    }
    &--arrow--right {
      .ambientimpact-icon {
        right:  $photoswipe-icon-spacing;
      }
    }
  }

  // The spinner shown when an image is taking a while to load. We're resizing
  // this to the site of our buttons, which is in ems, not px as the original.
  &--css_animation &__preloader {
    width:      $photoswipe-button-size;
    height:     $photoswipe-button-size;

    &__icn {
      width:      $photoswipe-icon-size;
      height:     $photoswipe-icon-size;

      top:      50%;
      left:     50%;

      margin-top:   math.div($photoswipe-icon-size, 2) * -1;
      margin-left:  math.div($photoswipe-icon-size, 2) * -1;
    }

    &__cut {
      width:      math.div($photoswipe-icon-size, 2);
      height:     $photoswipe-icon-size;
    }

    &__donut {
      width:      $photoswipe-icon-size;
      height:     $photoswipe-icon-size;
    }
  }
}

// PhotoSwipe clones the activated thumbnail image and transforms that to the
// full size, while leaving the original in place. We add a class to the
// original when it's the currently active item in PhotoSwipe, both on open and
// when switching between slides in a gallery so that the original is not
// visible during transitions such as open or close.
//
// Also of note is that we use opacity as that's hardware accelerated and allows
// for a clean transition between the original thumbnail and the clone that
// PhotoSwipe creates.
//
// IMPORTANT: do not use will-change: opacity or any other method of promoting
// the thumbnail to its own compositor layer as that can cause performance
// issues and/or bugs if there are many thumbnails on a page. One notable
// example is Gecko on Android, which ends up not being able to promote
// position: sticky/fixed items to their own layers, resulting in them lagging
// visibly during scrolling.
.photoswipe-enabled-thumbnail {
  opacity: 1;

  &--hidden {
    opacity: 0;
  }
}
