// -----------------------------------------------------------------------------
//   Horizontal bleed background from within constrained container
// -----------------------------------------------------------------------------

@use '../helpers/colour';
@use 'material.common/material.shadow' as material-shadow;
@use 'sass:color';
@use 'sass:list';
@use 'sass:meta';

///
/// Sets a full viewport width background from inside a width-limited container.
///
/// @param {Colour} $colour
///   The background colour to use.
///
/// @param {Number} $z-index [1]
///   The z-index of the generated content element.
///
/// @param {Boolean|List} $shadow [false]
///   Whether to use a Material shadow. Can be a boolean or a list of 3
///   booleans. In the case of a list, controls which parts of the list returned
///   by material-shadow.shadow() are used; if an index is true, that part of
///   the shadow will be used; if an index is false, that part of the shadow
///   will not be used.
///
/// @param {Number} $shadow-depth [2]
///   The depth value passed to material-shadow.shadow().
///
/// @require {mixin} set-colours
/// @require {function} material-shadow.shadow
///
/// @link https://css-tricks.com/full-browser-width-bars/
///   Loosely inspired by this.
///
@mixin set(
  $colour,
  $z-index:       1,
  $shadow:        false,
  $shadow-depth:  2
) {
  position: relative;

  // Fallback just in case the browser doesn't support generated content, though
  // that's ancient by 2019 standards.
  @include colour.set-colours(
    $background: $colour
  );

  // Set the background to transparent but use the provided background colour as
  // the reference to set the contrasing foreground colour against, as the
  // background colour will be set on the absolutely positioned generated
  // content element below.
  @supports (content: '') {
    @include colour.set-colours(
      $background:            transparent,
      $background-reference:  $colour
    );
  }

  &::before {
    content: '';

    // This is in case the element has a .clearfix class, which defaults to
    // display: table.
    display:  block;

    position: absolute;

    top:    0;
    bottom: 0;

    left:   0;

    width:  100%;

    // Only attempt full viewport width if the browser says it supports viewport
    // units.
    @supports (width: 100vw) {
      left: 50%;

      width: 100vw;

      margin-left: -50vw;
    }

    @include colour.set-colours(
      $background: $colour
    );

    @if $shadow == true {
      $shadow: (true, true, true);
    }

    $shadow-list: ();

    @if meta.type-of($shadow) == 'list' and list.length($shadow) == 3 {
      $material-shadow: material-shadow.shadow($shadow-depth);

      // Use the parts of the shadow that we're asked to.
      @for $i from 1 through list.length($shadow) {
        @if list.nth($shadow, $i) == true {
          $shadow-list:
            list.append($shadow-list, list.nth($material-shadow, $i), 'comma');
        }
      }
    }

    box-shadow: $shadow-list;

    z-index: $z-index;
  }
}

///
/// Sets the targetted element as a full viewport width top edge shadow.
///
/// Meant to be used when you pass $shadow: (false, true, true) to mixin set,
/// and need to set the top peek shadow on another element to prevent the top
/// peek shadow from being set on top of certain elements, e.g. to maintain
/// visual continuity.
///
/// @param {Number} $depth [2]
///   The depth value passed to material-shadow.shadow().
///
/// @param {Number} $z-index [1]
///   The z-index of the generated element.
///
/// @param {Number} $height [1rem]
///   The height to set on the generated element.
///
/// @require {function} material-shadow.shadow
///
/// @see {mixin} set
///   Meant to be used along with this.
///
@mixin top-peek-shadow(
  $depth:   2,
  $z-index: 1,
  $height:  1rem
) {
  // Generate a Material shadow with the required depth.
  $material-shadow: material-shadow.shadow($depth);

  // Grab the first item in the list, which is the top peek shadow.
  $shadow: list.nth($material-shadow, 1);

  // Since this tends to be used on generated elements, set the content property
  // to ensure the block is displayed.
  content: '';

  position: absolute;

  // This places the element's top right at the bottom edge of the offset
  // parent, allowing the shadow to be aligned precisely.
  top:  100%;

  left: 0;

  width:  100%;
  height: $height;

  // Only attempt full viewport width if the browser says it supports viewport
  // units.
  @supports (width: 100vw) {
    left: 50%;

    width: 100vw;

    margin-left: -50vw;
  }

  // We're increasing the Material shadow top peek opacity a bit, to make it
  // more visible.
  box-shadow: list.set-nth($shadow, 4, color.adjust(list.nth($shadow, 4), $alpha: 0.3));

  z-index: $z-index;
}
