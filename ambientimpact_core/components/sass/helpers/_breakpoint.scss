// -----------------------------------------------------------------------------
//   Breakpoint helpers
// -----------------------------------------------------------------------------

@use 'include-media' as im;
@use 'sass:map';
@use 'sass:meta';
@use 'sass:string';

// It's recommended that min-width/height is reference using the greater than or
// equal expression ('>=') in @include media() calls, for consistency.

///
/// Default set of breakpoints.
///
$_breakpoints: (
  'height-tiny':  30em,
  'height-small': 45em
);

///
/// Add one or more breakpoints.
///
/// @param {Map} $new-breakpoints
///
/// @require $_breakpoints
///
@mixin add($new-breakpoints) {
  $_breakpoints: map.merge($_breakpoints, $new-breakpoints) !global;
}

///
/// Remove one or more breakpoints.
///
/// @param {ArgList} $names
///
/// @require $_breakpoints
///
@mixin remove($names...) {
  $_breakpoints: map.remove($_breakpoints, $names...) !global;
}

///
/// Generate a media query based on a list of conditions.
///
/// This functions as a wrapper around include-media to automatically include
/// any custom named breakpoints that have been defined. Using the include-media
/// media() mixin directly with a custom named breakpoint would result in an
/// error if it was not also wrapped in the media-context() mixin, which is what
/// we do here.
///
/// @param {Arglist} $conditions
///   Media query conditions.
///
/// @require {mixin} im.media
/// @require {mixin} im.media-context
/// @require {variable} $_breakpoints
///
@mixin on($conditions...) {
  @include im.media-context($_breakpoints) {
    @include im.media($conditions...) {
      @content;
    }
  }
}

///
/// Get the value of a specified breakpoint.
///
/// @param {String} $name - The name of the defined breakpoint.
///
/// @require $_breakpoints
///
/// @throw Will throw a warning if the breakpoint isn't defined.
///
@function get-value($name) {
  @if map.has-key($_breakpoints, $name) {
    @return map.get($_breakpoints, $name);

  } @else {
    @warn 'Couldn\'t find a breakpoint named "#{$name}".';

    @return '';
  }
}

///
/// Determine if a specified breakpoint exists.
///
/// @param {String} $name - The name of the defined breakpoint.
///
/// @return {Bool} Returns true if found, false if not.
///
/// @require $_breakpoints
///
@function exists($name) {
  @return map.has-key($_breakpoints, $name);
}
