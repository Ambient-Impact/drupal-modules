// -----------------------------------------------------------------------------
//   z-index helpers
// -----------------------------------------------------------------------------

@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';

// This is adapted from Matt Stow's functions:
// https://codepen.io/stowball/post/sassier-z-index-management-for-complex-layouts
// https://gist.github.com/stowball/080e77b8831e57f275f2a906f4d66697

///
/// Default z-index hierarchy. Later in the maps/lists means higher z-index.
///
/// Note that currently nested items only get the z-index from their parent map
/// or list, and are not aware of parent lists and what comes before them, so
/// each parent must correspond to a positioning context, else the z-indices
/// will not always work as expected.
///
$map: (
  // Secondary content, such as sidebars, footer, etc.
  page-secondary: (),
  // Main page content.
  page-main:      (),
  // Sections that are always above other content; may be position: fixed
  // or sticky, but not necessarily.
  page-floating:  (),

  // Right under floating elements.
  floating-below: (),
  // Floating elements, usually visible to all site visitors.
  floating:       (),
  // Right above floating elements.
  floating-above:   (),

  // Administration controls - such as contextual links - that need to be on
  // top of most other page elements.
  admin:    (),

  // Administration toolbar and child elements.
  toolbar:  (
    // Inactive/hidden trays.
    tray-inactive,
    // Active/visible trays.
    tray-active,
    // The black bar itself along the top of the viewport.
    bar,
  ),

  // Modal elements that block access to the rest of the document.
  modal:    (),
);

///
/// Get the specified nested z-index.
///
/// @param {ArgList} $keys - The keys to look for.
///
/// @requires $map
///
/// @author Matt Stow
///
@function get($keys...) {
  $current-map: $map;
  $found-index: null;

  @each $key in $keys {
    // If this level is a map, get the index and recurse down.
    @if (meta.type-of($current-map) == 'map') {
      $found-index: list.index(map.keys($current-map), $key);
      $current-map:     map.get($current-map, $key);

    // Otherwise, assume this is a list and try to get the key's index.
    } @else {
      $found-index: list.index($current-map, $key);
    }
  }

  // You did a bad.
  @if $found-index == null {
    @debug $keys;
    @error 'Could not find index for keys!';
  }

  @return $found-index;
}

///
/// Mixin wrapper for @function get().
///
/// @param {ArgList} $keys - The keys to look for.
///
/// @requires {function} z-index
///
@mixin get($keys...) {
  z-index: get($keys...);
}

// @mixin add($new) {
//  $map: map-merge($map, $new) !global;
// }

// @include add((
//  admin: (
//    offcanvas: (
//      butts: (
//        plz,
//      ),
//    ),
//  ),
// ));
// @debug $map;

// TO DO: get this working? Will need:
// https://www.sitepoint.com/extra-map-functions-sass/
// https://github.com/at-import/Sassy-Maps

// @mixin add($keys...) {
//  // $current-map: $map;

//  @if (length($keys) - 2 > 0) {
//    // There is at least one map level.
//  } @else if (length($keys) - 1 > 0)

//  @debug $keys;

//  // @for $i from 1 through length($keys) {
//  //  $key: nth($keys, $i);
//  //  @debug $key;

//  //  // Is the current level a map?
//  //  @if (type-of($current-map) == 'map') {
//  //    @debug 'Is map!';
//  //    @if (map-has-key($current-map, $key)) {
//  //      @debug 'Has key, recursing!';
//  //      $current-map: map-get($current-map, $key);
//  //    } @else if ($i < (length($keys) - 1)) {
//  //      @debug 'Key not found, creating map and recursing!';
//  //    } @else {
//  //      @debug 'Key not found, creating list!';
//  //    }

//  //  // If this is a list, this is the deepest container, and we just need to
//  //  // append the value.
//  //  } @else if (type-of($current-map) == 'list') {
//  //    @debug 'Is list, appending value!';
//  //    $current-map: append($current-map, $key);
//  //  }
//  //  @debug '------------------------------';
//  // }
// }

// @include add(page, floating, butts, plz);
//      // map  , map , map      , list , index;

// // 'modal' ->
// // 'modal', 'offcanvas' ->
// // 'modal', 'offcanvas', 'butts'
