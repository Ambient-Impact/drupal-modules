// -----------------------------------------------------------------------------
//  Ambient.Impact - Core - Material Design ripple component partial
// -----------------------------------------------------------------------------

// @see https://codepen.io/jproffitt71/pen/PBPKmw

///
/// The Material ripple fallback radius if rippling from the centre.
///
/// From the linked Pen:
/// > the radius of circle that would encompass the corners of a 1:1 square
/// > button as the worst case when rippling from the center.
///
/// @require {function} sqrt
///
/// @see https://codepen.io/jproffitt71/pen/PBPKmw
///   Based on this.
///
$material-ripple-fallback-radius: 100% * sqrt(2) / 2 !default;

$material-ripple-base-class: 'material-ripple';

@mixin material-ripple {
  @supports #{'(--test: orange)'} {
    --material-ripple-duration: 0.8s;

    &:active,
    &.#{$material-ripple-base-class}--ripple-active {
      &:not(:disabled):not(.disabled) {
        background-image:
          // This is the ripple itself.
          radial-gradient(
            circle closest-side at center,
            var(--material-ripple-colour) 0%,
            var(--material-ripple-colour)
              calc(100% - var(--material-ripple-blur-radius, 0px)),
            transparent 100%
          ),
          // This is used for simulating a fade out.
          linear-gradient(
            180deg, var(--material-ripple-colour) 10%, transparent 90%
          );
        background-size:    0 0, 0 0;
        background-repeat:  no-repeat;
        background-origin:  border-box;
        animation: material-ripple var(--material-ripple-duration) ease-in;
      }
    }

    &.#{$material-ripple-base-class}--ripple-reset:not(
      .#{$material-ripple-base-class}--input-active
    ) {
      // Reset the animation unless a form input is focused, so that keystrokes
      // don't trigger a ripple more than once.
      animation: none !important;
    }
  }
}

///
/// Fade out the foreground colour for use as the Material ripple colour.
///
/// @param {Color} $background
///   The background colour of the current element.
///
/// @param {Color} $foreground
///   The foreground colour of the current element.
///
@function material-ripple-set-colours-callback($background, $foreground) {
  @return transparentize($foreground, 0.6);
}

// material-ripple-set-colours-callback() event callback registration.
@include on-event(
  'set-colours',
  '--material-ripple-colour',
  'material-ripple-set-colours-callback'
);
