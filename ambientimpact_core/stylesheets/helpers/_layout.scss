// -----------------------------------------------------------------------------
//   Layout helpers
// -----------------------------------------------------------------------------

///
/// Contain floats in an element.
///
/// @link http://perishablepress.com/press/2009/12/06/new-clearfix-hack
///
@mixin contain-floats {
  &:after {
    content: '';

    display: block;
    width:  0;
    height: 0;

    visibility: hidden;

    font-size:    0;
    line-height:  0;

    clear: both;
  }
}

///
/// Apply styles if CSS Grid is supported and allowed.
///
/// This is used to both automate checking for grid support and to allow easy
/// development of non-grid fallbacks by appending the 'disable-grid' query
/// string to any URL, which will instruct ambientimpact_core to not apply the
/// .use-grid class to the <body> element.
///
/// @param {Boolean} $supports-check [true]
///   Whether to wrap @content in an @supports block.
///
/// @param {Boolean} $modern-grid-only [true]
///   Whether to only apply @content to the final CSS Grid spec, or to also
///   include the old Edge/IE implementation.
///
/// @require {mixin} root-conditions
///
/// @content
///   The styles to conditionally apply when CSS Grid is supported and enabled,
///   depending on the passed parameters.
///
/// @see \Drupal\ambientimpact_core\EventSubscriber\Preprocess\PreprocessHTMLEventSubscriber::preprocessHTML()
///   The PHP class where .use-grid is conditionally applied based on the
///   presence or lack of presence of the 'disable-grid' query string.
///
/// @link https://ambientimpact.com/web/snippets/excluding-microsoft-edges-old-css-grid-implementation-with-feature-queries
///   Details on how we exclude the old Edge/IE CSS Grid implementation.
///
/// @link https://ambientimpact.com/web/snippets/should-i-try-to-use-the-ie-implementation-of-css-grid-layout
///   The limitations/issues with  the old Edge/IE CSS Grid implementation.
///
@mixin use-grid($supports-check: true, $modern-grid-only: true) {
  @include root-conditions('.use-grid', 'body') {
    @if $supports-check == true {
      @if $modern-grid-only == true {
        @supports (grid-area: auto) {
          @content;
        }

      } @else {
        @supports (display: grid) {
          @content;
        }
      }

    } @else {
      @content;
    }
  }
}

///
/// Apply styles for browsers that support the gap properties for flexbox.
///
/// It's unfortunately not currently possible to test for support of gap
/// properties for flexbox, so using support for other things that we can test
/// for as proxies is the next best thing. The most important one is the
/// @supports for logical properties, which were added in their standardized
/// form at or about the same time - for Safari desktop and mobile this is
/// exactly the same version, but Chrome added logical properties a bit later.
/// Firefox was the earliest to implement them, and so we have to use an second
/// proxy for something that was added in the same version that added flexbox
/// gap (Firefox 63): the prefers-reduced-motion media query.
///
/// @see https://gist.github.com/OliverJAsh/7f29d0fa1d35216ec681d2949c3fe8b7#gistcomment-3959360
///   Comment detailing the reasoning for all of this.
///
/// @see https://caniuse.com/flexbox-gap
///
/// @see https://caniuse.com/css-logical-props
///
/// @see https://caniuse.com/prefers-reduced-motion
///
/// @see https://caniuse.com/?compare=firefox+62,firefox+63,chrome+83,chrome+84,safari+14,safari+14.1&compareCats=all
///   Browser support comparison used to find relatively accurate proxies to
///   test for.
///
@mixin supports-flexbox-gap {
  @media (prefers-reduced-motion: no-preference), (prefers-reduced-motion: reduce) {
    // This instructs Autoprefixer to not prefix the @supports conditions as
    // that would add -webkit-margin-start: 1em for margin-inline-start: 1em,
    // resulting in false positives with Chromium/WebKit. Note the @at-root {}
    // to ensure that Sass outputs this outside of any selector otherwise
    // Autoprefixer won't find it.
    //
    // @see https://github.com/postcss/autoprefixer/issues/532
    //   Autoprefixer added support for /*! ... */ comments that are output by
    //   Sass even in compressed style.
    @at-root {
      /*! autoprefixer: ignore next */
    }
    @supports (margin-inline-start: 1em) {
      @content;
    }
  }
}
