<?php

/**
 * Implements hook_theme().
 *
 * Defines the following theme elements:
 * - 'description_list'
 * - 'ambientimpact_icon'
 */
function ambientimpact_core_theme($existing, $type, $theme, $path) {
	$componentManager =
		\Drupal::service('plugin.manager.ambientimpact_component');

	$iconInstance	= $componentManager->getComponentInstance('icon');
	$iconConfig		= $iconInstance->getConfiguration();

	return [
		'description_list' => [
			'variables'	=> [
				'groups'		=> [],
				'attributes'	=> [],
			],
			'template'	=> 'description-list',
		],
		'ambientimpact_icon' => [
			'variables'	=> [
				'icon'					=> '',
				'bundle'				=>
					$iconConfig['defaults']['bundle'],
				'text'					=> '',
				// Can be one of 'visible', 'visuallyHidden', or 'hidden'. The
				// latter two are analogous to the Drupal core .visually-hidden
				// and .hidden classes:
				// https://www.drupal.org/docs/8/theming/upgrading-classes-on-7x-themes-to-8x
				'textDisplay'			=>
					$iconConfig['defaults']['textDisplay'],
				'containerAttributes'	=> [],
				'containerTag'			=>
					$iconConfig['defaults']['containerTag'],
				'iconAttributes'		=> [],
				'useAttributes'			=> [],
				'textAttributes'		=> [],
				'url'					=> '',
				'standalone'			=> null,
				'size'					=> $iconConfig['defaults']['size'],
			],
			'template'	=> 'ambientimpact-icon',
		],
	];
}

/**
 * Implements hook_page_attachments().
 *
 * This adds our general library which contains common and layout CSS.
 *
 * This attaches the following components unconditionally:
 * - pointer_focus_hide
 *
 * This outputs the framework and component JavaScript settings to
 * drupalSettings.AmbientImpact.
 */
function ambientimpact_core_page_attachments(array &$page) {
	$page['#attached']['library'][] = 'ambientimpact_core/core';

	// Unconditionally attach these components to the page.
	foreach ([
		'pointer_focus_hide',
	] as $name) {
		$page['#attached']['library'][] =
			'ambientimpact_core/component.' . $name;
	}

	$jsSettings = [
		'framework'	=> [
			'cache'		=> [
				'assetKey'	=>
					\Drupal::state()->get('system.css_js_query_string'),
			],
		],
		'components'	=>
			\Drupal::service('plugin.manager.ambientimpact_component')
				->getComponentJSSettings()
	];

	$page['#attached']['drupalSettings']['AmbientImpact'] = $jsSettings;
}

/**
 * Implements hook_library_info_build().
 *
 * This returns the libraries defined in individual Ambient.Impact Components,
 * as returned by the 'plugin.manager.ambientimpact_component' service.
 *
 * @see \Drupal\ambientimpact_core\ComponentPluginManager::getComponentLibraries()
 *   Returns the value returned by this method.
 *
 * @see https://www.drupal.org/docs/8/creating-custom-modules/adding-stylesheets-css-and-javascript-js-to-a-drupal-8-module#dynamic-css-js
 */
function ambientimpact_core_library_info_build() {
	return
		\Drupal::service('plugin.manager.ambientimpact_component')
			->getComponentLibraries();
}

/**
 * Implements hook_library_info_alter().
 *
 * This replaces Drupal core's Modernizr with our own. We implement all the
 * options core's does, plus others. Note that we only do this if the core
 * Modernizr path is used, so as not to replace another module's override.
 */
function ambientimpact_core_library_info_alter(&$libraries, $extension) {
	$moduleHandler		= \Drupal::service('module_handler');
	$coreModernizrPath	= 'assets/vendor/modernizr/modernizr.min.js';
	$ourModernizrPath	= '../' . $moduleHandler
		->getModule('ambientimpact_core')->getPath() . '/' . $coreModernizrPath;

	if (
		$extension === 'core' &&
		isset($libraries['modernizr']['js'][$coreModernizrPath])
	) {
		// Save the settings core's uses.
		$libraries['modernizr']['js'][$ourModernizrPath] =
			$libraries['modernizr']['js'][$coreModernizrPath];

		// Remove the core path.
		unset($libraries['modernizr']['js'][$coreModernizrPath]);

		// This is the version that Grunt Modernizr has pulled on 2019-03-02.
		// @todo Can this be read from the file?
		$libraries['modernizr']['version'] = 'v3.5.0';
	}
}

/**
 * Prepare variables for HTML document templates.
 *
 * Default template: html.html.twig.
 *
 * This adds a 'use-grid' class to the <html> element if 'disable-grid' is not
 * found in the request query.
 *
 * @param array $vars
 *   An associative array containing variables for the template.
 *
 * @see template_preprocess_html()
 * @see \Symfony\Component\HttpFoundation\RequestStack
 */
function ambientimpact_core_preprocess_html(array &$vars) {
	$requestStack	= \Drupal::service('request_stack');
	$requestQuery	= $requestStack->getCurrentRequest()->query;

	// If the query parameter is not present, this will return null. If the
	// parameter is present, it will be a string, either empty or not.
	if ($requestQuery->get('disable-grid') === null) {
		// This applies to the <body>. Why isn't this an Attributes object?
		$vars['attributes']['class'][] = 'use-grid';
	}
}
